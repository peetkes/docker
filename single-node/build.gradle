plugins {
    // gradle -PenvironmentName=x ...
    id 'net.saliman.properties' version '1.5.1'
    id 'com.avast.gradle.docker-compose' version "0.14.0"
}

dockerCompose {
    waitForTcpPorts = false
    stopContainers = true // doesn't call `docker-compose down` if set to false - see below the paragraph about reconnecting; default is true
    removeContainers = false // default is true
    captureContainersOutputToFiles = 'logs/docker'
    projectName = project.property("projectName")
    environment.put "mlVersion", mlVersion
    environment.put "mlHost", mlHost
    environment.put "mlAdmin", mlAdmin
    environment.put "mlPassword", mlPassword
    environment.put "mlHealthPort", mlHealthPort
    environment.put "mlForeignBindPort", mlForeignBindPort
    environment.put "mlBindPort", mlBindPort
    environment.put "mlServicesPort", mlServicesPort
    environment.put "mlAdminPort", mlAdminPort
    environment.put "mlManagePort", mlManagePort
    environment.put "mlAppPorts", mlAppPorts
    environment.put "dataFolder", dataFolder
}

task composeSetupMarkLogicNode(dependsOn:composeUp)  {
  doLast {
    sleep(5 * 1000) //ensure node is up
    def init = exec {
      ignoreExitValue true
      if (project.hasProperty('mlPassword'))
        commandLine 'docker', 'exec', mlHost, 'init-marklogic', '-p', mlPassword
      else 
        commandLine 'docker', 'exec', mlHost, 'init-marklogic'
    }
    if(init.getExitValue() == 0) {
        logger.info("INIT SUCCESSFULL")
    } else {
        logger.info("INIT FAILED")
    }
  }
}

task composeRestart(dependsOn: composeDown){
  finalizedBy composeUp
}

task composeTeardown(type: Delete, dependsOn:composeDown) {
  //remove logs directory
  delete 'logs/'+mlHost
  doLast {
    exec {
      commandLine 'docker', 'rm', mlHost
    }
  }
}